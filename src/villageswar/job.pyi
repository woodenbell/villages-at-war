from typing import Dict, ClassVar, Callable

config = None # type: dict

def mk_warrior() -> Job: ...

def mk_breeder() -> Job: ...

def mk_healer() -> Job: ...

class Job(object):
    jobs: ClassVar[Dict[str, Callable[[], Job]]]
    name: ClassVar[str]
    ...

    def __init__(self):
        self.years = None  # type: int
        self.professional = None  # type: bool
        ...

    def year_service(self): ...

    def calculate_professional_chance(self) -> float: ...

    def get_job_multiplier(self) -> Dict[str, float]: ...
    
    @classmethod
    def get_job(cls, name: str) -> Job: ...

    def __repr__(self) -> str: ...

class Warrior(Job):
    ...

    def __init__(self):
        super().__init__()
        ...

    def get_job_multiplier(self) -> Dict[str, float]: ...

class Breeder(Job):
    ...

    def __init__(self):
        super().__init__()
        ...

    def get_job_multiplier(self) -> Dict[str, float]: ...

class Healer(Job):
    ...

    def __init__(self):
        super().__init__()
        ...

    def get_job_multiplier(self) -> Dict[str, float]: ...
