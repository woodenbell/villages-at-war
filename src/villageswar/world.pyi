from typing import Union, Dict, List

from villageswar.village import Village
from villageswar.villager import Villager

config = None # type: dict

def maximum(val: Union[int, float], max_val: Union[int, float]) -> Union[int, float]: ...

def process_rest(villager: Villager, villager_index: int): ...

def process_action(villager: Villager, categories: (Dict[str, Villager], Dict[str, Villager]),
                   village_1_2: bool, villager_index: int, rem_indexes: List[int]): ...

def process_combat(villager1: Villager, villager2: Villager, target_off_guard: bool,
                   villager_index: int, target_index: int): ...

def process_procreating(villager1: Villager, villager2: Villager, villager_index: int, partner_index: int): ...

def process_healing(villager1: Villager, villager2: Villager, villager_index: int): ...

class World(object):
    ...

    def __init__(self, village1: Village, village2: Village):
        self.name = None  # type: str
        self.village1 = None  # type: Village
        self.village2 = None  # type: Village
        self.date = None  # type: Dict[str, int]
        ...

    def date_formatted(self) -> str: ...

    def day_pass(self): ...

    def resolve_actions(self): ...

    def get_action_categories(self) -> (Dict[str, List[Villager]], Dict[str, List[Villager]]): ...

    def date_update(self): ...
